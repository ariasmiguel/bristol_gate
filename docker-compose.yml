services:
  # Main Bristol Gate Application - Initial Setup
  bristol-gate-setup:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bristol-gate-setup
    environment:
      - FRED_API_KEY=${FRED_API_KEY}
      - EIA_TOKEN=${EIA_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CHROME_DRIVER_PATH=/usr/bin/chromedriver
    volumes:
      # Persist data and database
      - bristol_data:/app/data
      - bristol_logs:/app/logs
      # Mount config if you want to override
      - ./.env:/app/.env:ro
    networks:
      - bristol-network
    restart: "no"  # Run once for initial setup
    command: >
      sh -c "
        echo '🚀 Bristol Gate - Initial Setup via Docker' &&
        echo 'Installing package...' &&
        pip install -e . &&
        echo 'Running initial setup script...' &&
        ./scripts/initial_setup.sh &&
        echo '✅ Initial setup complete!'
      "

  # Main Bristol Gate Application - Production Runtime
  bristol-gate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bristol-gate-app
    environment:
      - FRED_API_KEY=${FRED_API_KEY}
      - EIA_TOKEN=${EIA_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CHROME_DRIVER_PATH=/usr/bin/chromedriver
    volumes:
      # Persist data and database
      - bristol_data:/app/data
      - bristol_logs:/app/logs
      # Mount config if you want to override
      - ./.env:/app/.env:ro
    networks:
      - bristol-network
    depends_on:
      bristol-gate-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    command: >
      sh -c "
        echo '📊 Bristol Gate - Production Runtime' &&
        pip install -e . &&
        echo 'Running incremental update...' &&
        ./scripts/incremental_update.sh &&
        echo 'Production run complete. Keeping container alive for monitoring...' &&
        tail -f /dev/null
      "

  # Cron service for scheduled data updates
  bristol-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bristol-gate-scheduler
    environment:
      - FRED_API_KEY=${FRED_API_KEY}
      - EIA_TOKEN=${EIA_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CHROME_DRIVER_PATH=/usr/bin/chromedriver
    volumes:
      - bristol_data:/app/data
      - bristol_logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - bristol-network
    depends_on:
      bristol-gate:
        condition: service_started
    restart: unless-stopped
    user: root  # Need root for cron
    command: >
      sh -c "
        echo '⏰ Bristol Gate - Scheduler Setup' &&
        pip install -e . &&
        echo 'Setting up daily cron jobs...' &&
        echo '# Bristol Gate Daily Updates' > /etc/cron.d/bristol-gate &&
        echo '0 6 * * * bristol cd /app && ./scripts/incremental_update.sh >> /app/logs/cron.log 2>&1' >> /etc/cron.d/bristol-gate &&
        echo '30 7 * * * bristol cd /app && ./scripts/incremental_update.sh --sources yahoo >> /app/logs/cron.log 2>&1' >> /etc/cron.d/bristol-gate &&
        chmod 0644 /etc/cron.d/bristol-gate &&
        crontab /etc/cron.d/bristol-gate &&
        echo 'Cron jobs installed:' &&
        crontab -l &&
        echo 'Starting cron daemon...' &&
        cron -f
      "

  # Optional: Monitoring service
  bristol-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bristol-gate-monitor
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - bristol_data:/app/data:ro
      - bristol_logs:/app/logs:ro
    networks:
      - bristol-network
    depends_on:
      - bristol-gate
    restart: unless-stopped
    command: >
      sh -c "
        echo '📊 Bristol Gate - Monitoring Service' &&
        pip install -e . &&
        echo 'Starting monitoring loop...' &&
        while true; do
          echo '📈 Checking Bristol Gate status at: $(date)' &&
          ls -la data/silver/featured_data_*.parquet | tail -1 &&
          echo 'Health check complete. Sleeping for 1 hour...' &&
          sleep 3600
        done
      "

volumes:
  bristol_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  bristol_logs:
    driver: local

networks:
  bristol-network:
    driver: bridge 